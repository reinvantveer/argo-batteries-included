global:
  argoServerHost: &ref_argoServerHost
    argo.localhost

argo-cd:
  enabled: true
  dex:
    enabled: false

  server:
    extraArgs:
      - --insecure
    ingress:
      enabled: true
      hosts:
        - argocd.localhost

minio:
  enabled: true

  mode: standalone

  # Tweak the size of the disk usage for storage
  persistence:
    size: 5Gi

  replicas: 1

  resources:
    requests:
      memory: 128Mi

  consoleIngress:
    enabled: true
    path: /
    hosts:
      - minio.localhost

  users:
    ## Username, password and policy to be assigned to the user
    ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
    ## Add new policies as explained here https://docs.min.io/docs/minio-multi-user-quickstart-guide.html
    ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
    ## make sure to disable this if you are using LDAP.
    - accessKey: console
      secretKey: console123
      policy: consoleAdmin

  # Bucket for Argo logging and data artifacts
  buckets:
   - name: argo
     policy: none
     purge: false

# Back-end for workflow archive
postgresql:
  enabled: true

  resources:
    requests:
      memory: 64Mi

  # On k3s, PostgreSQL somehow needs special permissions on the volume in order to set the user/pass config properly
  volumePermissions:
    enabled: true

  postgresqlUsername: postgres
  postgresqlPassword: postgres

argo-workflows:
  enabled: true

  server:
    ingress:
      enabled: true
      hosts:
        - *ref_argoServerHost
      paths:
        - /

    extraArgs:
      # Disable dev-mode authentication
      - --auth-mode=server

    secure: false

  controller:
    workflowNamespaces:
      - data
      - operators

    workflowDefaults:
      archiveLogs: true

    # Set up database connection details for workflow archive
    persistence:
      connectionPool:
        maxIdleConns: 10
        maxOpenConns: 50
      # save the entire workflow into etcd and DB
      nodeStatusOffLoad: false
      # enable archiving of old workflows
      archive: true
      postgresql:
        host: argo-postgresql
        port: 5432
        database: postgres
        tableName: argo_workflows
        # the database secrets must be in the same namespace of the controller
        userNameSecret:
          name: argo-postgresql
          # NOTE that since we went with "postgres" as user, we only get a password secret, which is the same as the user
          key: postgresql-password
        passwordSecret:
          name: argo-postgresql
          key: postgresql-password

  # Set up logging artifact repo in minio s3 bucket

  # -- Influences the creation of the ConfigMap for the workflow-controller itself.
  useDefaultArtifactRepo: true
  # -- Use static credentials for S3 (eg. when not using AWS IRSA)
  useStaticCredentials: true
  artifactRepository:
    # -- Archive the main container logs as an artifact
    archiveLogs: true
    # -- Store artifact in a S3-compliant object store
    # @default -- See [values.yaml]
    s3:
      # Note the `key` attribute is not the actual secret, it's the PATH to
      # the contents in the associated secret, as defined by the `name` attribute.
      accessKeySecret:
        name: argo-minio
        key: rootUser
      secretKeySecret:
        name: argo-minio
        key: rootPassword
      insecure: true
      bucket: argo
      endpoint: argo-minio:9000
